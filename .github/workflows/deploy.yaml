name: Deploy to Environment

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        service: [api-gateway, auth-service, user-service, course-service]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./services/${{ matrix.service }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-staging:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'staging'
    environment: staging

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Deploy to EKS Staging
        run: |
          # Update kubeconfig
          aws eks update-kubeconfig --name edu-platform-staging
          
          # Update image tags in k8s manifests
          for service in api-gateway auth-service user-service course-service; do
            sed -i "s|image: .*/$service:.*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/$service:${{ github.sha }}|g" k8s/deployments/$service-deployment.yml
          done
          
          # Apply manifests
          kubectl apply -f k8s/namespace/
          kubectl apply -f k8s/configmaps/
          kubectl apply -f k8s/secrets/
          kubectl apply -f k8s/services/
          kubectl apply -f k8s/deployments/
          
          # Wait for rollout
          kubectl rollout status deployment/api-gateway -n edu-platform
          kubectl rollout status deployment/auth-service -n edu-platform
          kubectl rollout status deployment/user-service -n edu-platform
          kubectl rollout status deployment/course-service -n edu-platform

      - name: Run smoke tests
        run: |
          # Wait for services to be ready
          kubectl wait --for=condition=ready pod -l app=api-gateway -n edu-platform --timeout=300s
          
          # Get service URL
          API_URL=$(kubectl get svc api-gateway -n edu-platform -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          
          # Run smoke tests
          curl -f http://$API_URL/actuator/health || exit 1
          curl -f http://$API_URL/auth/health || exit 1
          curl -f http://$API_URL/users/health || exit 1
          curl -f http://$API_URL/courses/health || exit 1

  deploy-production:
    needs: deploy-staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event.inputs.environment == 'production'
    environment: production

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
          aws-region: us-east-1

      - name: Deploy to EKS Production
        run: |
          # Update kubeconfig
          aws eks update-kubeconfig --name edu-platform-production
          
          # Update image tags in k8s manifests
          for service in api-gateway auth-service user-service course-service; do
            sed -i "s|image: .*/$service:.*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/$service:${{ github.sha }}|g" k8s/deployments/$service-deployment.yml
          done
          
          # Apply manifests with rolling update
          kubectl apply -f k8s/namespace/
          kubectl apply -f k8s/configmaps/
          kubectl apply -f k8s/secrets/
          kubectl apply -f k8s/services/
          kubectl apply -f k8s/deployments/
          
          # Wait for rollout with longer timeout for production
          kubectl rollout status deployment/api-gateway -n edu-platform --timeout=600s
          kubectl rollout status deployment/auth-service -n edu-platform --timeout=600s
          kubectl rollout status deployment/user-service -n edu-platform --timeout=600s
          kubectl rollout status deployment/course-service -n edu-platform --timeout=600s

      - name: Run production health checks
        run: |
          # Wait for all pods to be ready
          kubectl wait --for=condition=ready pod -l app=api-gateway -n edu-platform --timeout=300s
          kubectl wait --for=condition=ready pod -l app=auth-service -n edu-platform --timeout=300s
          kubectl wait --for=condition=ready pod -l app=user-service -n edu-platform --timeout=300s
          kubectl wait --for=condition=ready pod -l app=course-service -n edu-platform --timeout=300s
          
          # Get service URL
          API_URL=$(kubectl get svc api-gateway -n edu-platform -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          
          # Comprehensive health checks
          curl -f http://$API_URL/actuator/health || exit 1
          curl -f http://$API_URL/auth/health || exit 1
          curl -f http://$API_URL/users/health || exit 1
          curl -f http://$API_URL/courses/health || exit 1
          
          # Check metrics endpoints
          curl -f http://$API_URL/actuator/prometheus || exit 1

  rollback:
    runs-on: ubuntu-latest
    if: failure()
    needs: [deploy-staging, deploy-production]
    environment: production

    steps:
      - name: Rollback production deployment
        run: |
          aws eks update-kubeconfig --name edu-platform-production
          
          # Rollback each service
          kubectl rollout undo deployment/api-gateway -n edu-platform
          kubectl rollout undo deployment/auth-service -n edu-platform
          kubectl rollout undo deployment/user-service -n edu-platform
          kubectl rollout undo deployment/course-service -n edu-platform
          
          # Wait for rollback to complete
          kubectl rollout status deployment/api-gateway -n edu-platform
          kubectl rollout status deployment/auth-service -n edu-platform
          kubectl rollout status deployment/user-service -n edu-platform
          kubectl rollout status deployment/course-service -n edu-platform

  notify-deployment:
    needs: [deploy-staging, deploy-production]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Notify deployment success
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#deployments'
          text: |
            üöÄ Deployment successful!
            Environment: ${{ github.event.inputs.environment || 'staging' }}
            Commit: ${{ github.sha }}
            Repository: ${{ github.repository }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify deployment failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#deployments'
          text: |
            ‚ùå Deployment failed!
            Environment: ${{ github.event.inputs.environment || 'staging' }}
            Commit: ${{ github.sha }}
            Repository: ${{ github.repository }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Create GitHub Release
        if: success() && github.event.inputs.environment == 'production'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          body: |
            ## Changes
            - Automated deployment from commit ${{ github.sha }}
            
            ## Services Deployed
            - API Gateway
            - Auth Service
            - User Service
            - Course Service
            
            ## Environment
            - Production
            
            ## Deployment Time
            - ${{ github.event.head_commit.timestamp }}
          draft: false
          prerelease: false