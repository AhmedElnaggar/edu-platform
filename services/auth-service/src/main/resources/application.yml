server:
  port: 8081

spring:
  application:
    name: auth-service
  config:
    import: "optional:consul:"
  # Database Configuration
  datasource:
    url: jdbc:postgresql://localhost:5432/auth_service
    username: auth_user
    password: auth_password
    driver-class-name: org.postgresql.Driver
    hikari:
      connection-timeout: 20000
      maximum-pool-size: 10
      minimum-idle: 5
      idle-timeout: 300000
      leak-detection-threshold: 60000

  # JPA Configuration
  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
        use_sql_comments: true
    open-in-view: false

  # Mail Configuration
  mail:
    host: ${SMTP_HOST:smtp.gmail.com}
    port: ${SMTP_PORT:587}
    username: ${SMTP_USERNAME:a39588494@gmail.com}
    ##Lion@123456789
    password: ${SMTP_PASSWORD:lhvc ejms mtdb bwwq}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
            required: true

  task:
    execution:
      pool:
        core-size: 5
        max-size: 20
        queue-capacity: 100
        keep-alive: 60s
      thread-name-prefix: "async-"

  # Flyway Configuration
  flyway:
    enabled: true
    locations: classpath:db/migration
    baseline-on-migrate: true

  # Service Discovery
  cloud:
    consul:
      host: localhost
      port: 8500
      discovery:
        enabled: true
        register: true
        ip-address: ${SERVICE_IP:127.0.0.1}  # Explicit IP
        hostname: ${SERVICE_HOSTNAME:localhost}  # Override hostname
        service-name: auth-service
        health-check-path: /actuator/health
        health-check-interval: 60s
        prefer-ip-address: true

# JWT Configuration
jwt:
  secret: ${JWT_SECRET:myVerySecretKeyForJWTTokenGenerationThatIsAtLeast256BitsLongAndSecure}
  expiration: ${JWT_EXPIRATION:86400000}  # 24 hours
  refresh-expiration: ${JWT_REFRESH_EXPIRATION:604800000}  # 7 days

# Management & Monitoring
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: always
      show-components: always
  health:
    db:
      enabled: true
    consul:
      enabled: true
  metrics:
    export:
      prometheus:
        enabled: true

#app config
app:
  base-url: ${BASE_URL:http://localhost:8080}
  user-service:
    url: ${USER_SERVICE_URL:http://localhost:8081}

  email:
    from: ${FROM_EMAIL:noreply@eduplatform.com}

  email-verification:
    token-expiration-hours: 24


# Logging
logging:
  level:
    com.edu.auth: INFO
    org.springframework.security: DEBUG
    org.hibernate.SQL: DEBUG
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level [%X{traceId:-},%X{spanId:-}] %logger{36} - %msg%n"

---
# Docker Profile
spring:
  config:
    activate:
      on-profile: docker

  datasource:
    url: jdbc:postgresql://auth-db:5432/auth_service

  cloud:
    consul:
      host: consul
      port: 8500