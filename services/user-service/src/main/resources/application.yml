server:
  port: 8082

spring:
  application:
    name: user-service
  config:
    import: "optional:consul:"
  # Database Configuration
  datasource:
    url: jdbc:postgresql://localhost:5433/user_service
    username: user_user
    password: user_password
    driver-class-name: org.postgresql.Driver
    hikari:
      connection-timeout: 20000
      maximum-pool-size: 10
      minimum-idle: 5

  # JPA Configuration
  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
    open-in-view: false

  # Flyway Configuration
  flyway:
    enabled: true
    locations: classpath:db/migration
    baseline-on-migrate: true

  # Redis Configuration
  data:
    redis:
      host: localhost
      port: 6379
      timeout: 2000ms
      lettuce:
        pool:
          max-active: 8
          max-idle: 8
          min-idle: 0

  # Cache Configuration
  cache:
    type: redis
    redis:
      time-to-live: 600000  # 10 minutes

  # Service Discovery
  cloud:
    consul:
      host: localhost
      port: 8500
      discovery:
        service-name: user-service
        health-check-path: /actuator/health
        health-check-interval: 60s
        prefer-ip-address: true

  # Kafka Configuration
  kafka:
    bootstrap-servers: localhost:9092
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      acks: all
      retries: 3

# JWT Configuration (for token validation)
jwt:
  secret: ${JWT_SECRET:myVerySecretKeyForJWTTokenGenerationThatIsAtLeast256BitsLongAndSecure}

# Auth Service Configuration
auth-service:
  url: http://localhost:8081

# Management & Monitoring
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: always
  health:
    db:
      enabled: true
    redis:
      enabled: true
    consul:
      enabled: true

# Logging
logging:
  level:
    com.edu.user: INFO
    org.springframework.security: DEBUG
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level [%X{traceId:-},%X{spanId:-}] %logger{36} - %msg%n"

---
# Docker Profile
spring:
  config:
    activate:
      on-profile: docker

  datasource:
    url: jdbc:postgresql://user-db:5432/user_service

  data:
    redis:
      host: redis

  cloud:
    consul:
      host: consul

  kafka:
    bootstrap-servers: kafka:9092

auth-service:
  url: http://auth-service:8081