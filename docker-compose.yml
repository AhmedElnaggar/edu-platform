services:
  # =============================================================================
  # INFRASTRUCTURE SERVICES
  # =============================================================================

  # Service Discovery
  consul:
    image: hashicorp/consul:1.17
    container_name: consul
    ports:
      - "8500:8500/tcp"
      - "8600:8600/tcp"
      - "8600:8600/udp"
    command: consul agent -dev -ui -client=0.0.0.0 -bind=0.0.0.0
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8500/v1/status/leader"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      - edu-network

  # Databases
  auth-db:
    image: postgres:15
    container_name: auth-postgres
    environment:
      POSTGRES_DB: auth_service
      POSTGRES_USER: auth_user
      POSTGRES_PASSWORD: auth_password
    ports:
      - "5432:5432"
    volumes:
      - auth_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U auth_user -d auth_service"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      - edu-network

  pgadmin:
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "5050:80"
    depends_on:
      - auth-db
      - user-db
    networks:
      - edu-network

  user-db:
    image: postgres:15
    container_name: user-postgres
    environment:
      POSTGRES_DB: user_service
      POSTGRES_USER: user_user
      POSTGRES_PASSWORD: user_password
    ports:
      - "5433:5432"
    volumes:
      - user_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user_user -d user_service"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      - edu-network

  course-db:
    image: mongo:7
    container_name: course-mongo
    environment:
      MONGO_INITDB_DATABASE: course_service
      MONGO_INITDB_ROOT_USERNAME: course_user
      MONGO_INITDB_ROOT_PASSWORD: course_password
    ports:
      - "27017:27017"
    volumes:
      - course_data:/data/db
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      - edu-network

  mongo-express:
    image: mongo-express:1.0.2
    container_name: mongo-express
    environment:
      ME_CONFIG_MONGODB_URL: mongodb://course_user:course_password@course-db:27017/course_service?authSource=admin
      ME_CONFIG_BASICAUTH_USERNAME: admin
      ME_CONFIG_BASICAUTH_PASSWORD: pass
    ports:
      - "8089:8081"
    depends_on:
      course-db:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - edu-network

  # Cache
  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      - edu-network

  # Message Queue
  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_4LW_COMMANDS_WHITELIST: "*"
    healthcheck:
      test: ["CMD-SHELL", "echo srvr | nc localhost 2181 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    ports:
      - "2181:2181"
    volumes:
      - zk_data:/var/lib/zookeeper/data
      - zk_log:/var/lib/zookeeper/log
    restart: unless-stopped
    networks:
      - edu-network

  kafka:
    image: confluentinc/cp-kafka:7.6.0
    container_name: kafka
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:29092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_HEAP_OPTS: "-Xmx2G -Xms2G"
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    ports:
      - "29092:29092"
      - "9092:9092"
    depends_on:
      zookeeper:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "kafka-broker-api-versions --bootstrap-server localhost:9092 || exit 1"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 60s
    volumes:
      - kafka_data:/var/lib/kafka/data
    restart: unless-stopped
    networks:
      - edu-network

  # =============================================================================
  # MICROSERVICES (All use root context now)
  # =============================================================================

  # API Gateway
  api-gateway:
    build:
      context: .  # Root context
      dockerfile: ./services/api-gateway/Dockerfile
    container_name: api-gateway
    depends_on:
      consul:
        condition: service_healthy
      auth-service:
        condition: service_healthy
      user-service:
        condition: service_healthy
      course-service:
        condition: service_healthy
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - JAVA_OPTS=-Xmx512m -Xms256m
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped
    networks:
      - edu-network

  # Auth Service
  auth-service:
    build:
      context: .  # Root context
      dockerfile: ./services/auth-service/Dockerfile
    container_name: auth-service
    depends_on:
      auth-db:
        condition: service_healthy
      consul:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - "8081:8081"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - JAVA_OPTS=-Xmx512m -Xms256m
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped
    networks:
      - edu-network

  # User Service
  user-service:
    build:
      context: .  # Root context
      dockerfile: ./services/user-service/Dockerfile
    container_name: user-service
    depends_on:
      user-db:
        condition: service_healthy
      redis:
        condition: service_healthy
      consul:
        condition: service_healthy
      kafka:
        condition: service_healthy
      auth-service:
        condition: service_healthy
    ports:
      - "8082:8082"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - JAVA_OPTS=-Xmx512m -Xms256m
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped
    networks:
      - edu-network

  # Course Service
  course-service:
    build:
      context: .  # Root context
      dockerfile: ./services/course-service/Dockerfile
    container_name: course-service
    depends_on:
      course-db:
        condition: service_healthy
      consul:
        condition: service_healthy
      kafka:
        condition: service_healthy
      auth-service:
        condition: service_healthy
      user-service:
        condition: service_healthy
    ports:
      - "8083:8083"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - JAVA_OPTS=-Xmx512m -Xms256m
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped
    networks:
      - edu-network

  # =============================================================================
  # MONITORING & MANAGEMENT
  # =============================================================================

  # Kafka UI
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8092:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      - edu-network

  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - prometheus_data:/prometheus
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      - edu-network

  # Keycloak
  keycloak:
    image: quay.io/keycloak/keycloak:latest
    container_name: keycloak
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://auth-db:5432/auth_service
      KC_DB_USERNAME: auth_user
      KC_DB_PASSWORD: auth_password
    ports:
      - "8091:8080"
    command: start-dev
    depends_on:
      auth-db:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - edu-network

volumes:
  auth_data:
  user_data:
  course_data:
  redis_data:
  prometheus_data:
  grafana_data:
  kafka_data:
  zk_data:
  zk_log:

networks:
  edu-network:
    driver: bridge